@using InventoryManagement.Web.ViewModels
@using InventoryManagement.Web.Data.Models
@using InventoryManagement.Web.DTOs
@using InventoryManagement.Web.Data.Models.Enums
@model CreateInventoryViewModel

@{
    ViewData["Title"] = "Edit Inventory";
}

<h1 class="mb-4">
    @Model.InventoryDTO.Title
    <span id="save-status" class="badge bg-secondary ms-2"></span>
</h1>

<form id="inventory-edit-form" asp-controller="Inventory" asp-action="Edit" asp-route-id="@Model.InventoryDTO.Id" method="post" data-inventory-id="@Model.InventoryDTO.Id" enctype="multipart/form-data">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input type="hidden" asp-for="InventoryDTO.Id" />
    <input type="hidden" asp-for="InventoryDTO.Version" />
    @Html.AntiForgeryToken()

    <ul class="nav nav-tabs mb-4" id="inventoryTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="general-tab" data-bs-toggle="tab" data-bs-target="#general" type="button" role="tab">General Settings</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="custom-id-tab" data-bs-toggle="tab" data-bs-target="#custom-id" type="button" role="tab">Custom ID</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="fields-tab" data-bs-toggle="tab" data-bs-target="#fields" type="button" role="tab">Fields</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="access-tab" data-bs-toggle="tab" data-bs-target="#access" type="button" role="tab">Access</button>
        </li>
    </ul>

    <div class="tab-content" id="inventoryTabsContent">
        <div class="tab-pane fade show active" id="general" role="tabpanel" tabindex="0">
            <div class="form-group mb-3">
                <label asp-for="InventoryDTO.Title" class="form-label"></label>
                <input asp-for="InventoryDTO.Title" class="form-control" />
                <span asp-validation-for="InventoryDTO.Title" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="InventoryDTO.Description" class="form-label"></label>
                <textarea asp-for="InventoryDTO.Description" class="form-control"></textarea>
                <span asp-validation-for="InventoryDTO.Description" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="InventoryDTO.CategoryId" class="form-label">Category</label>
                <select asp-for="InventoryDTO.CategoryId" asp-items="@(new SelectList(Model.Categories, "Id", "Name"))" class="form-control">
                    <option value="">-- Select a Category --</option>
                </select>
                <span asp-validation-for="InventoryDTO.CategoryId" class="text-danger"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="InventoryDTO.ImageUrl" class="form-label">Image URL</label>
                <input asp-for="InventoryDTO.ImageUrl" class="form-control" />
                <span asp-validation-for="InventoryDTO.ImageUrl" class="text-danger"></span>
            </div>
            <div class="form-group form-check mb-3">
                <input asp-for="InventoryDTO.IsPublic" class="form-check-input" />
                <label asp-for="InventoryDTO.IsPublic" class="form-check-label">Is Public</label>
            </div>
            <div class="form-group mb-3">
                <label asp-for="InventoryDTO.TagsInput" class="form-label">Tags (comma-separated)</label>
                <input asp-for="InventoryDTO.TagsInput" class="form-control" value="@(string.Join(", ", Model.InventoryDTO.Tags))" />
                <span asp-validation-for="InventoryDTO.TagsInput" class="text-danger"></span>
            </div>
        </div>

        <div class="tab-pane fade" id="custom-id" role="tabpanel" tabindex="0">
            <div class="card p-3">
                <p>You can set up inventory numbers in your preferred format. To create a format, add new elements, edit them, drag to reorder, or drag elements out of the form to delete them.</p>
                <div class="alert alert-secondary d-flex align-items-center" role="alert">
                    <span class="text-nowrap me-2">Example:</span>
                    <span id="custom-id-preview" class="flex-grow-1 fw-bold text-truncate">...</span>
                </div>
                <input type="hidden" name="InventoryDTO.CustomIdFormat" id="custom-id-format-input" />
                <div id="id-elements-container" class="mb-3 p-2 border rounded sortable-list" style="min-height: 50px;">
                </div>

                <div id="id-source-container" class="d-flex flex-wrap gap-2 mt-3">
                    <div class="id-source-item p-2 border rounded bg-light" data-type="FixedText">
                        <i class="fas fa-lock me-1"></i> Fixed
                        <span class="info-icon" data-bs-toggle="tooltip" title="A piece of unchanging text. E.g., you can use Unicode emoji.">?</span>
                    </div>
                    <div class="id-source-item p-2 border rounded bg-light" data-type="Random">
                        <i class="fas fa-random me-1"></i> Random
                        <span class="info-icon" data-bs-toggle="tooltip" title="A random value. E.g., you can format it as a six-digit decimal (D6) or 5-digit hex (X5).">?</span>
                    </div>
                    <div class="id-source-item p-2 border rounded bg-light" data-type="Sequence">
                        <i class="fas fa-sort-numeric-up-alt me-1"></i> Sequence
                        <span class="info-icon" data-bs-toggle="tooltip" title="A sequential index. E.g., you can format it with leading zeros (D4) or without them (D).">?</span>
                    </div>
                    <div class="id-source-item p-2 border rounded bg-light" data-type="DateTime">
                        <i class="fas fa-calendar-alt me-1"></i> Date/time
                        <span class="info-icon" data-bs-toggle="tooltip" title="An item creation date and time. E.g., you can use an abbreviated day of the week (ddd).">?</span>
                    </div>
                    <div class="id-source-item p-2 border rounded bg-light" data-type="Guid">
                        <i class="fas fa-fingerprint me-1"></i> GUID
                        <span class="info-icon" data-bs-toggle="tooltip" title="A globally unique identifier.">?</span>
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="fields" role="tabpanel" tabindex="0">
            <h3 class="mt-4 mb-3">Custom Fields</h3>
            <div id="custom-fields-container" class="mb-3">
                @if (Model.InventoryDTO.FieldDefinitions != null)
                {
                    for (int i = 0; i < Model.InventoryDTO.FieldDefinitions.Count; i++)
                    {
                        var fieldItem = Model.InventoryDTO.FieldDefinitions[i];
                        <div class="custom-field p-3 border rounded mb-3" data-index="@i">
                            <input type="hidden" name="InventoryDTO.FieldDefinitions[@i].Id" value="@fieldItem.Id" />
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h5 class="m-0">Custom Field</h5>
                                <button type="button" class="btn-close remove-field-btn" aria-label="Remove"></button>
                            </div>
                            <div class="form-group mb-2">
                                <label>Title</label>
                                <input type="text" name="InventoryDTO.FieldDefinitions[@i].Title" class="form-control" value="@fieldItem.Title" required />
                            </div>
                            <div class="form-group mb-2">
                                <label>Type</label>
                                <select name="InventoryDTO.FieldDefinitions[@i].Type" class="form-control field-type-select" data-selected-type="@fieldItem.Type">
                                    <option value="String">String</option>
                                    <option value="Int">Int</option>
                                    <option value="Bool">Bool</option>
                                </select>
                            </div>
                            <div class="form-group form-check mb-2">
                                <input type="checkbox" name="InventoryDTO.FieldDefinitions[@i].IsRequired" class="form-check-input" data-is-required="@fieldItem.IsRequired" />
                                <label class="form-check-label">Is Required</label>
                            </div>
                            <div class="form-group form-check mb-2">
                                <input type="checkbox" name="InventoryDTO.FieldDefinitions[@i].ShowInTable" class="form-check-input" data-show-in-table="@fieldItem.ShowInTable" />
                                <label class="form-check-label">Show in Table</label>
                            </div>
                            <div class="form-group mb-2">
                                <label>Description</label>
                                <input type="text" name="InventoryDTO.FieldDefinitions[@i].Description" class="form-control" value="@fieldItem.Description" />
                            </div>
                            <div class="form-group validation-fields mb-2" data-field-type="@fieldItem.Type">
                                <div class="string-validation" style="@(fieldItem.Type == FieldType.String ? "" : "display:none;")">
                                    <label>Validation Regex</label>
                                    <input type="text" name="InventoryDTO.FieldDefinitions[@i].ValidationRegex" class="form-control" value="@fieldItem.ValidationRegex" />
                                </div>
                                <div class="int-validation" style="@(fieldItem.Type == FieldType.Int ? "" : "display:none;")">
                                    <label>Validation Min</label>
                                    <input type="number" name="InventoryDTO.FieldDefinitions[@i].ValidationMin" class="form-control mb-2" value="@fieldItem.ValidationMin" />
                                    <label>Validation Max</label>
                                    <input type="number" name="InventoryDTO.FieldDefinitions[@i].ValidationMax" class="form-control" value="@fieldItem.ValidationMax" />
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
            <button type="button" id="add-field-btn" class="btn btn-secondary mb-4">Add Custom Field</button>
        </div>
        <div class="tab-pane fade" id="access" role="tabpanel" tabindex="0">
            <div class="card p-3">
                <h3>Manage Access</h3>
                <p>Choose which users have write access to this inventory. Admins always have full access.</p>

                <div class="input-group mb-3">
                    <input type="text" class="form-control" id="user-search-input" placeholder="Search for users by name or email">
                    <button class="btn btn-primary" type="button" id="add-user-btn" style="display: none;">Add User</button>
                </div>

                <table class="table" id="access-users-table">
                    <thead>
                        <tr>
                            <th>Username</th>
                            <th>Email</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.InventoryDTO.InventoryAccesses != null)
                        {
                            for (int i = 0; i < Model.InventoryDTO.InventoryAccesses.Count; i++)
                            {
                                var access = Model.InventoryDTO.InventoryAccesses[i];
                                <tr data-user-id="@access.UserId">
                                    <td>@access.User.UserName</td>
                                    <td>@access.User.Email</td>
                                    <td>
                                        <button type="button" class="btn btn-danger btn-sm remove-access-btn">Remove</button>
                                        <input type="hidden" name="InventoryDTO.InventoryAccesses[@i].UserId" value="@access.UserId" />
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <button type="submit" class="btn btn-primary me-2">Save Changes</button>
</form>
@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
    <script>
        const form = document.getElementById('inventory-edit-form');
        const saveStatus = document.getElementById('save-status');
        const addFieldBtn = document.getElementById('add-field-btn');
        const customFieldsContainer = document.getElementById('custom-fields-container');
        let fieldCounter = 0;

        function addField(field = {}) {
            const fieldId = field.Id || null;
            const fieldIndex = fieldCounter++;
            const fieldType = field.Type || 'String';
            const fieldHtml = `
                        <div id="custom-fields-container" class="mb-3">
        </div>
            `;
            customFieldsContainer.insertAdjacentHTML('beforeend', fieldHtml);
            const newFieldElement = customFieldsContainer.lastElementChild;
            newFieldElement.querySelector('.field-type-select').addEventListener('change', (e) => {
                const type = e.target.value;
                const validationFields = e.target.closest('.custom-field').querySelector('.validation-fields');
                validationFields.setAttribute('data-field-type', type);
                validationFields.querySelector('.string-validation').style.display = type === 'String' ? '' : 'none';
                validationFields.querySelector('.int-validation').style.display = type === 'Int' ? '' : 'none';
            });
            newFieldElement.querySelector('.remove-field-btn').addEventListener('click', (e) => {
                e.target.closest('.custom-field').remove();
                renumberFields();
            });
        }

        function renumberFields() {
            document.querySelectorAll('.custom-field').forEach((field, index) => {
                field.setAttribute('data-index', index);
                field.querySelectorAll('input, select').forEach(input => {
                    const originalName = input.name;
                    if (originalName) {
                        input.name = originalName.replace(/\[\d+\]/, `[${index}]`);
                    }
                });
            });
        }

        document.addEventListener('DOMContentLoaded', function() {
        @if (Model.InventoryDTO.FieldDefinitions != null)
        {
            @:var existingFields = @Html.Raw(Json.Serialize(Model.InventoryDTO.FieldDefinitions));
            @:fieldCounter = 0;
            @:existingFields.forEach(field => {
            @:addField({
            @:Id: field.Id,
            @:Title: field.Title,
            @:Type: field.Type,
            @:IsRequired: field.IsRequired,
            @:ShowInTable: field.ShowInTable,
            @:Description: field.Description,
            @:ValidationRegex: field.ValidationRegex,
            @:ValidationMin: field.ValidationMin,
            @:ValidationMax: field.ValidationMax
            @:});
            @:});
        }
        });
        addFieldBtn.addEventListener('click', () => addField());
        customFieldsContainer.addEventListener('change', (e) => {
            const select = e.target.closest('.field-type-select');
            if (select) {
                const type = select.value;
                const validationFields = select.closest('.custom-field').querySelector('.validation-fields');
                validationFields.setAttribute('data-field-type', type);
                validationFields.querySelector('.string-validation').style.display = type === 'String' ? '' : 'none';
                validationFields.querySelector('.int-validation').style.display = type === 'Int' ? '' : 'none';
            }
        });
        customFieldsContainer.addEventListener('click', (e) => {
            if (e.target.closest('.remove-field-btn')) {
                e.target.closest('.custom-field').remove();
                renumberFields();
            }
        });
        const idElementsContainer = document.getElementById('id-elements-container');
        const idSourceContainer = document.getElementById('id-source-container');
        const idPreview = document.getElementById('custom-id-preview');
        let idElementCounter = 0;

              function generateElementHtml(element) {
            const index = idElementCounter++;
            const type = element.type;
            let inputHtml = '';
            if (type === 'FixedText') {
                inputHtml = `<input type="text" name="InventoryDTO.CustomIdFormatElements[${index}].Value" class="form-control form-control-sm me-2" placeholder="Text" value="${element.value || ''}" />`;
            } else if (type !== 'Guid') {
                inputHtml = `<input type="text" name="InventoryDTO.CustomIdFormatElements[${index}].Format" class="form-control form-control-sm me-2" placeholder="Format" value="${element.format || ''}" />`;
            }
            return `
                <div class="id-element-item p-2 border rounded bg-light d-flex align-items-center mb-1" data-index="${index}" data-type="${type}">
                    <i class="fas fa-grip-lines me-2 handle"></i>
                    <span class="badge bg-primary me-2">${type}</span>
                    ${inputHtml}
                    <button type="button" class="btn btn-danger btn-sm remove-element-btn" aria-label="Remove">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            `;
        }

        function updateIdPreview() {
            let previewText = '';
            $(idElementsContainer).find('.id-element-item').each(function() {
                const type = $(this).data('type');
                const value = $(this).find('input[name*="Value"]').val() || '';
                const format = $(this).find('input[name*="Format"]').val() || '';
                switch(type) {
                    case 'FixedText':
                        previewText += value || '';
                        break;
                    case 'Random':
                        previewText += format ? `[Random:${format}]` : '[Random]';
                        break;
                    case 'Sequence':
                        previewText += format ? `[Seq:${format}]` : '[Seq]';
                        break;
                    case 'DateTime':
                        previewText += format ? `[Date:${format}]` : '[Date]';
                        break;
                    case 'Guid':
                        previewText += '[GUID]';
                        break;
                }
            });
            idPreview.textContent = previewText || '...';
        }

        function renumberIdElements() {
            $(idElementsContainer).find('.id-element-item').each(function(index) {
                $(this).find('input, select').each(function() {
                    const originalName = $(this).attr('name');
                    if (originalName) {
                        $(this).attr('name', originalName.replace(/\[\d+\]/, `[${index}]`));
                    }
                });
            });
        }

                $(function() {
            const accessUsersTable = $('#access-users-table tbody');
            const userSearchInput = $('#user-search-input');
            const creatorId = '@Model.InventoryDTO.CreatorId';

            userSearchInput.autocomplete({
                source: function(request, response) {
                    $.ajax({
                        url: '/Users/Search',
                        data: { query: request.term },
                        dataType: 'json',
                        success: function(data) {
                            response($.map(data, function(user) {
                                return {
                                    label: `${user.username} (${user.email})`,
                                    value: user.username,
                                    userId: user.id,
                                    userEmail: user.email
                                };
                            }));
                        }
                    });
                },
                minLength: 3,
                select: function(event, ui) {
                    const userId = ui.item.userId;
                    const userName = ui.item.value;
                    const userEmail = ui.item.userEmail;

                    const isUserAdded = $(`#access-users-table tr[data-user-id='${userId}']`).length > 0;
                    if (!isUserAdded) {
                        const newRow = `
                            <tr data-user-id="${userId}">
                                <td>${userName}</td>
                                <td>${userEmail}</td>
                                <td>
                                    <button type="button" class="btn btn-danger btn-sm remove-access-btn">Remove</button>
                                    <input type="hidden" name="InventoryDTO.InventoryAccesses[${accessUsersTable.children('tr').length}].UserId" value="${userId}" />
                                </td>
                            </tr>
                        `;
                        accessUsersTable.append(newRow);
                    }
                    userSearchInput.val('');
                    event.preventDefault();
                }
            });

            $(document).on('click', '.remove-access-btn', function() {
                $(this).closest('tr').remove();
                accessUsersTable.children('tr').each(function(index, row) {
                    $(row).find('input[type="hidden"]').attr('name', `InventoryDTO.InventoryAccesses[${index}].UserId`);
                });
            });
        });
        $(function() {
            const idElementsContainer = document.getElementById('id-elements-container');
            const idSourceContainer = document.getElementById('id-source-container');
            const idPreview = document.getElementById('custom-id-preview');
            let idElementCounter = 0;

            $(idElementsContainer).sortable({
                items: "> .id-element-item",
                handle: ".handle",
                stop: function(event, ui) {
                    renumberIdElements();
                    updateIdPreview();
                },
                receive: function(event, ui) {
                    const type = ui.item.data('type');
                    const element = { type: type, value: '', format: '' };
                    const html = generateElementHtml(element);
                    ui.item.replaceWith(html);
                    renumberIdElements();
                    updateIdPreview();
                }
            });
            $(idSourceContainer).find('.id-source-item').draggable({
                helper: 'clone',
                connectToSortable: '#id-elements-container'
            });
            $(document).on('click', '.remove-element-btn', function() {
                $(this).closest('.id-element-item').remove();
                renumberIdElements();
                updateIdPreview();
            });
            $(document).on('input', '#id-elements-container input, #id-elements-container select', updateIdPreview);

            const customIdFormatScript = document.getElementById('customIdFormatData');
            if (customIdFormatScript) {
                try {
                    const formatModel = JSON.parse(customIdFormatScript.textContent);
                    if (formatModel && formatModel.Elements) {
                        formatModel.Elements.forEach(element => {
                            const html = generateElementHtml(element);
                            $(idElementsContainer).append(html);
                        });
                        renumberIdElements();
                        updateIdPreview();
                    }
                } catch (e) {
                    console.error('Failed to parse CustomIdFormat JSON:', e);
                }
            }
        });

        form.addEventListener('submit', function(e) {
            const idElements = [];
            document.querySelectorAll('.id-element-item').forEach(element => {
                const type = element.dataset.type;
                const valueInput = element.querySelector('input[name*="Value"]');
                const formatInput = element.querySelector('input[name*="Format"]');
                const idElement = {
                    Type: type,
                    Value: valueInput ? valueInput.value : null,
                    Format: formatInput ? formatInput.value : null
                };
                idElements.push(idElement);
            });
            const customIdFormat = {
                Elements: idElements
            };
            const jsonString = JSON.stringify(customIdFormat);
            document.getElementById('custom-id-format-input').value = jsonString;
        });
    </script>
}